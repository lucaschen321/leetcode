{"data": {"question": {"questionId": "208", "title": "Implement Trie (Prefix Tree)", "titleSlug": "implement-trie-prefix-tree", "content": "<p>A <a href=\"https://en.wikipedia.org/wiki/Trie\" target=\"_blank\"><strong>trie</strong></a> (pronounced as &quot;try&quot;) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p>\n\n<p>Implement the Trie class:</p>\n\n<ul>\n\t<li><code>Trie()</code> Initializes the trie object.</li>\n\t<li><code>void insert(String word)</code> Inserts the string <code>word</code> into the trie.</li>\n\t<li><code>boolean search(String word)</code> Returns <code>true</code> if the string <code>word</code> is in the trie (i.e., was inserted before), and <code>false</code> otherwise.</li>\n\t<li><code>boolean startsWith(String prefix)</code> Returns <code>true</code> if there is a previously inserted string <code>word</code> that has the prefix <code>prefix</code>, and <code>false</code> otherwise.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input</strong>\n[&quot;Trie&quot;, &quot;insert&quot;, &quot;search&quot;, &quot;search&quot;, &quot;startsWith&quot;, &quot;insert&quot;, &quot;search&quot;]\n[[], [&quot;apple&quot;], [&quot;apple&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;], [&quot;app&quot;]]\n<strong>Output</strong>\n[null, null, true, false, true, null, true]\n\n<strong>Explanation</strong>\nTrie trie = new Trie();\ntrie.insert(&quot;apple&quot;);\ntrie.search(&quot;apple&quot;);   // return True\ntrie.search(&quot;app&quot;);     // return False\ntrie.startsWith(&quot;app&quot;); // return True\ntrie.insert(&quot;app&quot;);\ntrie.search(&quot;app&quot;);     // return True\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= word.length, prefix.length &lt;= 2000</code></li>\n\t<li><code>word</code> and <code>prefix</code> consist only of lowercase English letters.</li>\n\t<li>At most <code>3 * 10<sup>4</sup></code> calls <strong>in total</strong> will be made to <code>insert</code>, <code>search</code>, and <code>startsWith</code>.</li>\n</ul>\n", "difficulty": "Medium", "isPaidOnly": false, "hints": [], "likes": 10144, "dislikes": 115, "companyTagStats": null, "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Trie {\npublic:\n    Trie() {\n        \n    }\n    \n    void insert(string word) {\n        \n    }\n    \n    bool search(string word) {\n        \n    }\n    \n    bool startsWith(string prefix) {\n        \n    }\n};\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie* obj = new Trie();\n * obj->insert(word);\n * bool param_2 = obj->search(word);\n * bool param_3 = obj->startsWith(prefix);\n */"}, {"lang": "Java", "langSlug": "java", "code": "class Trie {\n\n    public Trie() {\n        \n    }\n    \n    public void insert(String word) {\n        \n    }\n    \n    public boolean search(String word) {\n        \n    }\n    \n    public boolean startsWith(String prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.insert(word);\n * boolean param_2 = obj.search(word);\n * boolean param_3 = obj.startsWith(prefix);\n */"}, {"lang": "Python", "langSlug": "python", "code": "class Trie(object):\n\n    def __init__(self):\n        \n\n    def insert(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: None\n        \"\"\"\n        \n\n    def search(self, word):\n        \"\"\"\n        :type word: str\n        :rtype: bool\n        \"\"\"\n        \n\n    def startsWith(self, prefix):\n        \"\"\"\n        :type prefix: str\n        :rtype: bool\n        \"\"\"\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"}, {"lang": "Python3", "langSlug": "python3", "code": "class Trie:\n\n    def __init__(self):\n        \n\n    def insert(self, word: str) -> None:\n        \n\n    def search(self, word: str) -> bool:\n        \n\n    def startsWith(self, prefix: str) -> bool:\n        \n\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.startsWith(prefix)"}, {"lang": "C", "langSlug": "c", "code": "\n\n\ntypedef struct {\n    \n} Trie;\n\n\nTrie* trieCreate() {\n    \n}\n\nvoid trieInsert(Trie* obj, char * word) {\n  \n}\n\nbool trieSearch(Trie* obj, char * word) {\n  \n}\n\nbool trieStartsWith(Trie* obj, char * prefix) {\n  \n}\n\nvoid trieFree(Trie* obj) {\n    \n}\n\n/**\n * Your Trie struct will be instantiated and called as such:\n * Trie* obj = trieCreate();\n * trieInsert(obj, word);\n \n * bool param_2 = trieSearch(obj, word);\n \n * bool param_3 = trieStartsWith(obj, prefix);\n \n * trieFree(obj);\n*/"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Trie {\n\n    public Trie() {\n        \n    }\n    \n    public void Insert(string word) {\n        \n    }\n    \n    public bool Search(string word) {\n        \n    }\n    \n    public bool StartsWith(string prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = new Trie();\n * obj.Insert(word);\n * bool param_2 = obj.Search(word);\n * bool param_3 = obj.StartsWith(prefix);\n */"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "\nvar Trie = function() {\n    \n};\n\n/** \n * @param {string} word\n * @return {void}\n */\nTrie.prototype.insert = function(word) {\n    \n};\n\n/** \n * @param {string} word\n * @return {boolean}\n */\nTrie.prototype.search = function(word) {\n    \n};\n\n/** \n * @param {string} prefix\n * @return {boolean}\n */\nTrie.prototype.startsWith = function(prefix) {\n    \n};\n\n/** \n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"}, {"lang": "Ruby", "langSlug": "ruby", "code": "class Trie\n    def initialize()\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Void\n=end\n    def insert(word)\n        \n    end\n\n\n=begin\n    :type word: String\n    :rtype: Boolean\n=end\n    def search(word)\n        \n    end\n\n\n=begin\n    :type prefix: String\n    :rtype: Boolean\n=end\n    def starts_with(prefix)\n        \n    end\n\n\nend\n\n# Your Trie object will be instantiated and called as such:\n# obj = Trie.new()\n# obj.insert(word)\n# param_2 = obj.search(word)\n# param_3 = obj.starts_with(prefix)"}, {"lang": "Swift", "langSlug": "swift", "code": "\nclass Trie {\n\n    init() {\n        \n    }\n    \n    func insert(_ word: String) {\n        \n    }\n    \n    func search(_ word: String) -> Bool {\n        \n    }\n    \n    func startsWith(_ prefix: String) -> Bool {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie()\n * obj.insert(word)\n * let ret_2: Bool = obj.search(word)\n * let ret_3: Bool = obj.startsWith(prefix)\n */"}, {"lang": "Go", "langSlug": "golang", "code": "type Trie struct {\n    \n}\n\n\nfunc Constructor() Trie {\n    \n}\n\n\nfunc (this *Trie) Insert(word string)  {\n    \n}\n\n\nfunc (this *Trie) Search(word string) bool {\n    \n}\n\n\nfunc (this *Trie) StartsWith(prefix string) bool {\n    \n}\n\n\n/**\n * Your Trie object will be instantiated and called as such:\n * obj := Constructor();\n * obj.Insert(word);\n * param_2 := obj.Search(word);\n * param_3 := obj.StartsWith(prefix);\n */"}, {"lang": "Scala", "langSlug": "scala", "code": "class Trie() {\n\n    def insert(word: String) {\n        \n    }\n\n    def search(word: String): Boolean = {\n        \n    }\n\n    def startsWith(prefix: String): Boolean = {\n        \n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Trie() {\n\n    fun insert(word: String) {\n        \n    }\n\n    fun search(word: String): Boolean {\n        \n    }\n\n    fun startsWith(prefix: String): Boolean {\n        \n    }\n\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"}, {"lang": "Rust", "langSlug": "rust", "code": "struct Trie {\n\n}\n\n\n/** \n * `&self` means the method takes an immutable reference.\n * If you need a mutable reference, change it to `&mut self` instead.\n */\nimpl Trie {\n\n    fn new() -> Self {\n        \n    }\n    \n    fn insert(&self, word: String) {\n        \n    }\n    \n    fn search(&self, word: String) -> bool {\n        \n    }\n    \n    fn starts_with(&self, prefix: String) -> bool {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * let obj = Trie::new();\n * obj.insert(word);\n * let ret_2: bool = obj.search(word);\n * let ret_3: bool = obj.starts_with(prefix);\n */"}, {"lang": "PHP", "langSlug": "php", "code": "class Trie {\n    /**\n     */\n    function __construct() {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return NULL\n     */\n    function insert($word) {\n        \n    }\n  \n    /**\n     * @param String $word\n     * @return Boolean\n     */\n    function search($word) {\n        \n    }\n  \n    /**\n     * @param String $prefix\n     * @return Boolean\n     */\n    function startsWith($prefix) {\n        \n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * $obj = Trie();\n * $obj->insert($word);\n * $ret_2 = $obj->search($word);\n * $ret_3 = $obj->startsWith($prefix);\n */"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "class Trie {\n    constructor() {\n\n    }\n\n    insert(word: string): void {\n\n    }\n\n    search(word: string): boolean {\n\n    }\n\n    startsWith(prefix: string): boolean {\n\n    }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * var obj = new Trie()\n * obj.insert(word)\n * var param_2 = obj.search(word)\n * var param_3 = obj.startsWith(prefix)\n */"}, {"lang": "Racket", "langSlug": "racket", "code": "(define trie%\n  (class object%\n    (super-new)\n    (init-field)\n    \n    ; insert : string? -> void?\n    (define/public (insert word)\n\n      )\n    ; search : string? -> boolean?\n    (define/public (search word)\n\n      )\n    ; starts-with : string? -> boolean?\n    (define/public (starts-with prefix)\n\n      )))\n\n;; Your trie% object will be instantiated and called as such:\n;; (define obj (new trie%))\n;; (send obj insert word)\n;; (define param_2 (send obj search word))\n;; (define param_3 (send obj starts-with prefix))"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec trie_init_() -> any().\ntrie_init_() ->\n  .\n\n-spec trie_insert(Word :: unicode:unicode_binary()) -> any().\ntrie_insert(Word) ->\n  .\n\n-spec trie_search(Word :: unicode:unicode_binary()) -> boolean().\ntrie_search(Word) ->\n  .\n\n-spec trie_starts_with(Prefix :: unicode:unicode_binary()) -> boolean().\ntrie_starts_with(Prefix) ->\n  .\n\n\n%% Your functions will be called as such:\n%% trie_init_(),\n%% trie_insert(Word),\n%% Param_2 = trie_search(Word),\n%% Param_3 = trie_starts_with(Prefix),\n\n%% trie_init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Trie do\n  @spec init_() :: any\n  def init_() do\n\n  end\n\n  @spec insert(word :: String.t) :: any\n  def insert(word) do\n\n  end\n\n  @spec search(word :: String.t) :: boolean\n  def search(word) do\n\n  end\n\n  @spec starts_with(prefix :: String.t) :: boolean\n  def starts_with(prefix) do\n\n  end\nend\n\n# Your functions will be called as such:\n# Trie.init_()\n# Trie.insert(word)\n# param_2 = Trie.search(word)\n# param_3 = Trie.starts_with(prefix)\n\n# Trie.init_ will be called before every test case, in which you can do some necessary initializations."}, {"lang": "Dart", "langSlug": "dart", "code": "class Trie {\n\n  Trie() {\n\n  }\n  \n  void insert(String word) {\n\n  }\n  \n  bool search(String word) {\n\n  }\n  \n  bool startsWith(String prefix) {\n\n  }\n}\n\n/**\n * Your Trie object will be instantiated and called as such:\n * Trie obj = Trie();\n * obj.insert(word);\n * bool param2 = obj.search(word);\n * bool param3 = obj.startsWith(prefix);\n */"}], "metaData": "{\n  \"classname\": \"Trie\",\n  \"constructor\": {\n    \"params\": []\n  },\n  \"methods\": [\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"word\"\n        }\n      ],\n      \"name\": \"insert\",\n      \"return\": {\n        \"type\": \"void\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"word\"\n        }\n      ],\n      \"name\": \"search\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    },\n    {\n      \"params\": [\n        {\n          \"type\": \"string\",\n          \"name\": \"prefix\"\n        }\n      ],\n      \"name\": \"startsWith\",\n      \"return\": {\n        \"type\": \"boolean\"\n      }\n    }\n  ],\n  \"return\": {\n    \"type\": \"boolean\"\n  },\n  \"systemdesign\": true\n}", "topicTags": [{"name": "Hash Table", "slug": "hash-table"}, {"name": "String", "slug": "string"}, {"name": "Design", "slug": "design"}, {"name": "Trie", "slug": "trie"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "design-add-and-search-words-data-structure", "title": "Design Add and Search Words Data Structure", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "design-search-autocomplete-system", "title": "Design Search Autocomplete System", "translatedTitle": null, "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "replace-words", "title": "Replace Words", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "implement-magic-dictionary", "title": "Implement Magic Dictionary", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "encrypt-and-decrypt-strings", "title": "Encrypt and Decrypt Strings", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "implement-trie-ii-prefix-tree", "title": "Implement Trie II (Prefix Tree)", "translatedTitle": null, "isPaidOnly": true}], "mysqlSchemas": [], "stats": "{\"totalAccepted\": \"818K\", \"totalSubmission\": \"1.3M\", \"totalAcceptedRaw\": 818008, \"totalSubmissionRaw\": 1299318, \"acRate\": \"63.0%\"}", "solution": {"id": "40", "title": "Implement Trie (Prefix Tree)", "content": "[TOC]\n\n## Summary\nThis article is for intermediate level users. It introduces the following ideas:\nThe data structure Trie (Prefix tree) and most common operations with it.\n\n## Solution\n\n#### Applications\n\nTrie (we pronounce \"try\") or prefix tree is a tree data structure, which is used for retrieval of a key in a dataset of strings.\nThere are various applications of this very efficient data structure such as :\n\n##### 1. [Autocomplete](https://en.wikipedia.org/wiki/Autocomplete)\n\n![Google Suggest](https://leetcode.com/media/original_images/208_GoogleSuggest.png){:width=\"539px\"}\n\n\n*Figure 1. Google Suggest in action.*\n\n\n##### 2. [Spell checker](https://en.wikipedia.org/wiki/Spell_checker)\n\n![Spell Checker](https://leetcode.com/media/original_images/208_SpellCheck.png){:width=\"400px\"}\n\n\n*Figure 2. A spell checker used in word processor.*\n\n\n##### 3. [IP routing (Longest prefix matching)](https://en.wikipedia.org/wiki/Longest_prefix_match)\n\n![IP Routing](https://leetcode.com/media/original_images/208_IPRouting.gif){:width=\"539px\"}\n\n\n*Figure 3. Longest prefix matching algorithm uses Tries in Internet Protocol (IP) routing to select an entry from a forwarding table.*\n\n\n##### 4. [T9 predictive text](https://en.wikipedia.org/wiki/T9_(predictive_text))\n\n![T9 Predictive Text](https://leetcode.com/media/original_images/208_T9.jpg)\n\n\n*Figure 4. T9 which stands for Text on 9 keys, was used on phones to input texts during the late 1990s.*\n\n\n##### 5. [Solving word games](https://en.wikipedia.org/wiki/Boggle)\n\n![Boggle](https://leetcode.com/media/original_images/208_Boggle.png){:width=\"350px\"}\n\n\n*Figure 5. Tries is used to solve Boggle efficiently by pruning the search space.*\n\n\nThere are several other data structures, like balanced trees and hash tables, which give us the possibility to search for a word in a dataset of strings. Then why do we need trie?\nAlthough hash table has $$O(1)$$ time complexity for looking for a key, it is not efficient in the following operations :\n\n* Finding all keys with a common prefix.\n* Enumerating a dataset of strings in lexicographical order.\n\nAnother reason why trie outperforms hash table, is that as hash table increases in size, there are lots of hash collisions and the search time complexity could deteriorate to $$O(n)$$, where $$n$$ is the number of keys inserted.\nTrie could use less space compared to Hash Table when storing many keys with the same prefix.\nIn this case using trie has only $$O(m)$$ time complexity, where $$m$$ is the key length.\nSearching for a key in a balanced tree costs  $$O(m \\log n)$$ time complexity.\n\n#### Trie node structure\n\nTrie is a rooted tree. Its nodes have the following fields:\n\n* Maximum of $$R$$ links to its children, where each link corresponds to one of $$R$$ character values from dataset alphabet.\nIn this article we assume that $$R$$ is 26, the number of lowercase latin letters.\n* Boolean field which specifies whether the node corresponds to the end of the key, or is just a key prefix.\n\n![Representation of a key in trie](https://leetcode.com/media/original_images/208_Node.png){:width=\"539px\"}\n\n\n*Figure 6. Representation of a key \"leet\" in trie.*\n\n\n\n<iframe src=\"https://leetcode.com/playground/didgKVX2/shared\" frameBorder=\"0\" name=\"didgKVX2\" width=\"100%\" height=\"515\"></iframe>\n\nTwo of the most common operations in a trie are insertion of a key and search for a key.\n\n#### Insertion of a key to a trie\n\nWe insert a key by searching into the trie. We start from the root and search a link, which corresponds to the first key character. There are two cases :\n\n* A link exists. Then we move down the tree following the link to the next child level. The algorithm continues with searching for the next key character.\n* A link does not exist. Then we create a new node and link it with the parent's link matching the current key character.\nWe repeat this step until we encounter the last character of the key, then we mark the current node as an end node and the algorithm finishes.\n\n![Insertion of keys into a trie](https://leetcode.com/media/original_images/208_TrieInsert.png){:width=\"539px\"}\n\n\n*Figure 7. Insertion of keys into a trie.*\n\n\n<iframe src=\"https://leetcode.com/playground/DMHFSaGD/shared\" frameBorder=\"0\" name=\"DMHFSaGD\" width=\"100%\" height=\"394\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(m)$$, where m is the key length.\n\nIn each iteration of the algorithm, we either examine or create a node in the trie till we reach the end of the key. This takes only $$m$$ operations.\n\n* Space complexity : $$O(m)$$.\n\nIn the worst case newly inserted key doesn't share a prefix with the the keys already inserted in the trie. We have to add $$m$$\nnew nodes, which takes us  $$O(m)$$ space.\n\n#### Search for a key in a trie\n\nEach key is represented in the trie as a path from the root to the internal node or leaf.\nWe start from the root with the first key character. We examine the current node for a link corresponding to the key character. There are two cases :\n\n* A link exist. We move to the next node in the path following this link, and proceed searching for the next key character.\n* A link does not exist. If there are no available key characters and current node is marked as `isEnd` we return true. Otherwise there are possible two cases in each of them we return false :\n\n    * There are key characters left, but it is impossible to follow the key path in the trie, and the key is missing.\n    * No key characters left, but current node is not marked as `isEnd`. Therefore the search key is only a prefix of another key in the trie.\n\n![Search of a key in a trie](https://leetcode.com/media/original_images/208_TrieSearchKey.png){:width=\"539px\"}\n\n\n*Figure 8. Search for a key in a trie.*\n\n\n\n<iframe src=\"https://leetcode.com/playground/asxeaGqh/shared\" frameBorder=\"0\" name=\"asxeaGqh\" width=\"100%\" height=\"462\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(m)$$\nIn each step of the algorithm we search for the next key character. In the worst case the algorithm performs $$m$$ operations.\n\n* Space complexity : $$O(1)$$\n\n#### Search for a key prefix in a trie\n\nThe approach is very similar to the one we used for searching a key in a trie. We traverse the trie from the root, till there are no characters left in key prefix or it is impossible to continue the path in the trie with the current key character. The only difference with the mentioned above `search for a key` algorithm is that when we come to an end of the key prefix, we always return true. We don't need to consider the `isEnd` mark of the current trie node, because we are searching for a prefix of a key, not for a whole key.\n\n![Search of a key prefix in a trie](https://leetcode.com/media/original_images/208_TrieSearchPrefix.png){:width=\"539px\"}\n\n\n*Figure 9. Search for a key prefix in a trie.*\n\n\n\n<iframe src=\"https://leetcode.com/playground/3jXj2wG4/shared\" frameBorder=\"0\" name=\"3jXj2wG4\" width=\"100%\" height=\"224\"></iframe>\n**Complexity Analysis**\n\n* Time complexity : $$O(m)$$\n\n* Space complexity : $$O(1)$$\n\n## Practice Problems\n\nHere are some wonderful problems for you to practice which uses the Trie data structure.\n\n1. [Add and Search Word - Data structure design](https://leetcode.com/problems/add-and-search-word-data-structure-design/) - Pretty much a direct application of Trie.\n2. [Word Search II](https://leetcode.com/problems/word-search-ii/) - Similar to Boggle.\n\nAnalysis written by: @elmirap.", "contentTypeId": "107", "paidOnly": false, "hasVideoSolution": false, "paidOnlyVideo": true, "canSeeDetail": true, "rating": {"count": 1054, "average": "4.918", "userRating": null}, "topic": {"id": 127843, "commentCount": 239, "topLevelCommentCount": 186, "favoriteCount": 0, "viewCount": 506495, "subscribed": false, "solutionTags": [], "post": {"id": 260414, "status": null, "creationDate": 1460413025, "author": {"username": "LeetCode", "isActive": true, "profile": {"userAvatar": "https://assets.leetcode.com/users/leetcode/avatar_1568224780.png", "reputation": 27343}}}}}}}}
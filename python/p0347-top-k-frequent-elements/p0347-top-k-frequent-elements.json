{"data": {"question": {"questionId": "347", "title": "Top K Frequent Elements", "titleSlug": "top-k-frequent-elements", "content": "<p>Given an integer array <code>nums</code> and an integer <code>k</code>, return <em>the</em> <code>k</code> <em>most frequent elements</em>. You may return the answer in <strong>any order</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> nums = [1,1,1,2,2,3], k = 2\n<strong>Output:</strong> [1,2]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> nums = [1], k = 1\n<strong>Output:</strong> [1]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n\t<li><code>-10<sup>4</sup> &lt;= nums[i] &lt;= 10<sup>4</sup></code></li>\n\t<li><code>k</code> is in the range <code>[1, the number of unique elements in the array]</code>.</li>\n\t<li>It is <strong>guaranteed</strong> that the answer is <strong>unique</strong>.</li>\n</ul>\n\n<p>&nbsp;</p>\n<p><strong>Follow up:</strong> Your algorithm&#39;s time complexity must be better than <code>O(n log n)</code>, where n is the array&#39;s size.</p>\n", "difficulty": "Medium", "isPaidOnly": false, "hints": [], "likes": 14328, "dislikes": 509, "companyTagStats": null, "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> topKFrequent(vector<int>& nums, int k) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] topKFrequent(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def topKFrequent(self, nums, k):\n        \"\"\"\n        :type nums: List[int]\n        :type k: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def topKFrequent(self, nums: List[int], k: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* topKFrequent(int* nums, int numsSize, int k, int* returnSize){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] TopKFrequent(int[] nums, int k) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number[]}\n */\nvar topKFrequent = function(nums, k) {\n    \n};"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} k\n# @return {Integer[]}\ndef top_k_frequent(nums, k)\n    \nend"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func topKFrequent(_ nums: [Int], _ k: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func topKFrequent(nums []int, k int) []int {\n    \n}"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def topKFrequent(nums: Array[Int], k: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun topKFrequent(nums: IntArray, k: Int): IntArray {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn top_k_frequent(nums: Vec<i32>, k: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $k\n     * @return Integer[]\n     */\n    function topKFrequent($nums, $k) {\n        \n    }\n}"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function topKFrequent(nums: number[], k: number): number[] {\n\n};"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (top-k-frequent nums k)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec top_k_frequent(Nums :: [integer()], K :: integer()) -> [integer()].\ntop_k_frequent(Nums, K) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec top_k_frequent(nums :: [integer], k :: integer) :: [integer]\n  def top_k_frequent(nums, k) do\n\n  end\nend"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> topKFrequent(List<int> nums, int k) {\n\n  }\n}"}], "metaData": "{\n  \"name\": \"topKFrequent\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"k\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\"\n  }\n}", "topicTags": [{"name": "Array", "slug": "array"}, {"name": "Hash Table", "slug": "hash-table"}, {"name": "Divide and Conquer", "slug": "divide-and-conquer"}, {"name": "Sorting", "slug": "sorting"}, {"name": "Heap (Priority Queue)", "slug": "heap-priority-queue"}, {"name": "Bucket Sort", "slug": "bucket-sort"}, {"name": "Counting", "slug": "counting"}, {"name": "Quickselect", "slug": "quickselect"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "word-frequency", "title": "Word Frequency", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "kth-largest-element-in-an-array", "title": "Kth Largest Element in an Array", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "sort-characters-by-frequency", "title": "Sort Characters By Frequency", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "split-array-into-consecutive-subsequences", "title": "Split Array into Consecutive Subsequences", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "top-k-frequent-words", "title": "Top K Frequent Words", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "k-closest-points-to-origin", "title": "K Closest Points to Origin", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "sort-features-by-popularity", "title": "Sort Features by Popularity", "translatedTitle": null, "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "sender-with-largest-word-count", "title": "Sender With Largest Word Count", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "most-frequent-even-element", "title": "Most Frequent Even Element", "translatedTitle": null, "isPaidOnly": false}], "mysqlSchemas": [], "stats": "{\"totalAccepted\": \"1.5M\", \"totalSubmission\": \"2.3M\", \"totalAcceptedRaw\": 1474692, \"totalSubmissionRaw\": 2294784, \"acRate\": \"64.3%\"}", "solution": {"id": "951", "title": "Top k Frequent Elements", "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div class='video-preview'></div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Heap\n\nLet's start from the simple [heap](https://en.wikipedia.org/wiki/Heap_(data_structure)) \napproach with $$\\mathcal{O}(N \\log k)$$\ntime complexity. To ensure that $$\\mathcal{O}(N \\log k)$$ is always \nless than $$\\mathcal{O}(N \\log N)$$, the particular case $$k = N$$ could be \nconsidered separately and solved in $$\\mathcal{O}(N)$$ time. \n\n**Algorithm**\n\n- The first step is to build a hash map `element -> its frequency`.\nIn Java, we use the data structure `HashMap`.\nPython provides dictionary subclass `Counter` to initialize the hash map we need\ndirectly from the input array.   \nThis step takes $$\\mathcal{O}(N)$$ time where `N` is a number of elements in the list.\n\n- The second step is to build a heap of _size k using N elements_. \nTo add the first `k` elements takes \na linear time $$\\mathcal{O}(k)$$ in the average case, and\n$O(\\log 1 + \\log 2 + ... + \\log k) = O(log k!) = \\mathcal{O}(k \\log k)$ in the worst case.\nIt's equivalent to\n[heapify implementation in Python](https://hg.python.org/cpython/file/2.7/Lib/heapq.py#l16).\nAfter the first `k` elements we start to push and pop at each step,\n`N - k` steps in total.\nThe time complexity of heap push/pop \nis $$\\mathcal{O}(\\log k)$$ and we do it `N - k` times that means\n$$\\mathcal{O}((N - k)\\log k)$$ time complexity.\nAdding both parts up, we get $$\\mathcal{O}(N \\log k)$$ time \ncomplexity for the second step.\n\n- The third and the last step is to convert the heap into an output array. \nThat could be done in $$\\mathcal{O}(k \\log k)$$ time.\n \nIn Python, library `heapq` provides a method `nlargest`,\nwhich [combines the last two steps under the hood](https://hg.python.org/cpython/file/2.7/Lib/heapq.py#l203) \nand has the same $$\\mathcal{O}(N \\log k)$$ time complexity.\n\n![diff](../Figures/347_rewrite/summary.png)\n\n**Implementation**\n\n<iframe src=\"https://leetcode.com/playground/Yk9K9Eqa/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"Yk9K9Eqa\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity : $$\\mathcal{O}(N \\log k)$$ if $$k < N$$ and $$\\mathcal{O}(N)$$\nin the particular case of $$N = k$$. That ensures time complexity to be better\nthan $$\\mathcal{O}(N \\log N)$$.\n\n* Space complexity : $$\\mathcal{O}(N + k)$$ to store the hash map with not more \n$$N$$ elements and a heap with $$k$$ elements.\n<br />\n<br />\n\n\n---\n\n#### Approach 2: Quickselect (Hoare's selection algorithm)\n\nQuickselect is a [textbook algorithm](https://en.wikipedia.org/wiki/Quickselect) \ntypically used to solve the problems \"find `k`*th* something\":\n`k`*th* smallest, `k`*th* largest, `k`*th* most frequent, \n`k`*th* less frequent, etc. Like quicksort, quickselect was developed \nby [Tony Hoare](https://en.wikipedia.org/wiki/Tony_Hoare), \nand also known as _Hoare's selection algorithm_.\n\nIt has $$\\mathcal{O}(N)$$ _average_ time complexity and is widely used \nin practice. It worth noting that its worst-case time complexity \nis $$\\mathcal{O}(N^2)$$, although the probability of this worst-case \nis negligible.\n\nThe approach is the same as for quicksort.\n\n> One chooses a pivot and defines its position in a sorted array in a \nlinear time using so-called _partition algorithm_. \n\nAs an output, we have an array where the pivot is on its perfect position\nin the ascending sorted array, sorted by the frequency. \nAll elements on the left of the pivot are less frequent than the pivot,\nand all elements on the right are more frequent or have the\nsame frequency.\n\nHence the array is now split into two parts.\nIf by chance our pivot element took `N - k`*th* final position, \nthen $$k$$ elements on the right are these top $$k$$ \nfrequent we're looking for. If not, we can choose one more pivot and \nplace it in its perfect position.\n\n![diff](../Figures/347_rewrite/hoare.png)\n\nIf that were a quicksort algorithm, one would have to process\nboth parts of the array. That would result in $$\\mathcal{O}(N \\log N)$$ time complexity.\nIn this case, there is no need to deal with both parts since one knows \nin which part to search for `N - k`*th* less frequent element, and that\nreduces the average time complexity to $$\\mathcal{O}(N)$$.\n\n**Algorithm**\n\nThe algorithm is quite straightforward :\n\n* Build a hash map `element -> its frequency` and convert its keys into\nthe array `unique` of unique elements. Note that elements are unique, but\ntheir frequencies are _not_. That means we need a partition algorithm \nthat works fine with _duplicates_. \n\n* Work with `unique` array. \nUse a partition scheme (please check the next section) to place the pivot \ninto its perfect position `pivot_index` in the sorted array,\nmove less frequent elements to the left of pivot, \nand more frequent or of the same frequency - to the right.\n\n* Compare `pivot_index` and `N - k`.\n \n    - If `pivot_index == N - k`, the pivot is \n    `N - k`*th* most frequent element, and all elements on the right\n    are more frequent or of the same frequency. \n    Return these top $$k$$ frequent elements.\n    \n    - Otherwise, choose the side of the array to proceed recursively.\n    \n![diff](../Figures/347_rewrite/details.png)\n\n**Lomuto's Partition Scheme**\n\nThere is a zoo of partition algorithms. The most simple \none is [Lomuto's Partition Scheme](https://en.wikipedia.org/wiki/Quicksort#Lomuto_partition_scheme), \nand so is what we will use in this article.\n\nHere is how it works:\n\n- Move pivot at the end of the array using swap. \n\n- Set the pointer at the beginning of the array `store_index = left`.\n    \n- Iterate over the array and move all less frequent elements \nto the left\n`swap(store_index, i)`. Move `store_index` one step to the \nright after each swap.\n\n- Move the pivot to its final place, and return this index.\n\n!?!../Documents/347_RES.json:1000,556!?!\n\n<iframe src=\"https://leetcode.com/playground/FCaWTkCw/shared\" frameBorder=\"0\" width=\"100%\" height=\"378\" name=\"FCaWTkCw\"></iframe>\n \n**Implementation**\n\nHere is a total algorithm implementation. \n\n<iframe src=\"https://leetcode.com/playground/dtAfebwb/shared\" frameBorder=\"0\" width=\"100%\" height=\"500\" name=\"dtAfebwb\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$\\mathcal{O}(N)$$ in the average case, \n    $$\\mathcal{O}(N^2)$$ in the worst case. \n    [Please refer to this card for the good detailed explanation of Master Theorem](https://leetcode.com/explore/learn/card/recursion-ii/470/divide-and-conquer/2871/).\n    Master Theorem helps to get an average complexity by writing the algorithm cost\n    as $$T(N) = a T(N / b) + f(N)$$. \n    Here we have an example of Master Theorem case III: \n    $$T(N) = T \\left(\\frac{N}{2}\\right) + N$$, \n    that results in $$\\mathcal{O}(N)$$ time complexity.\n    That's the case of random pivots.\n    \n    In the worst-case of constantly bad chosen pivots, the problem is \n    not divided by half at each step, it becomes just one element less,\n    that leads to $$\\mathcal{O}(N^2)$$ time complexity. \n    It happens, for example, if at each step you choose the pivot not \n    randomly, but take the rightmost element. \n    For the random pivot choice the probability of having such a \n    worst-case is negligibly small. \n\n* Space complexity: up to $$\\mathcal{O}(N)$$ to store hash map\nand array of unique elements.\n<br />\n<br />\n\n\n---\n#### Further Discussion: Could We Do Worst-Case Linear Time? \n\nIn theory, we could, the algorithm is called \n[Median of Medians](https://en.wikipedia.org/wiki/Median_of_medians).\n\nThis method is never used in practice because of two drawbacks:\n\n- It's _outperformer_. Yes, it works in a linear time $$\\alpha N$$, but\nthe constant $$\\alpha$$ is so large that in practice it often works even \nslower than $$N^2$$.  \n\n- It doesn't work with duplicates.\n<br />\n<br />\n\n\n---", "contentTypeId": "107", "paidOnly": false, "hasVideoSolution": true, "paidOnlyVideo": true, "canSeeDetail": true, "rating": {"count": 377, "average": "4.430", "userRating": null}, "topic": {"id": 646157, "commentCount": 345, "topLevelCommentCount": 209, "favoriteCount": 0, "viewCount": 640590, "subscribed": false, "solutionTags": [], "post": {"id": 1199838, "status": null, "creationDate": 1590185615, "author": {"username": "LeetCode", "isActive": true, "profile": {"userAvatar": "https://assets.leetcode.com/users/leetcode/avatar_1568224780.png", "reputation": 27343}}}}}}}}
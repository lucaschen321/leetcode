{"data": {"question": {"questionId": "49", "title": "Group Anagrams", "titleSlug": "group-anagrams", "content": "<p>Given an array of strings <code>strs</code>, group <strong>the anagrams</strong> together. You can return the answer in <strong>any order</strong>.</p>\n\n<p>An <strong>Anagram</strong> is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<pre><strong>Input:</strong> strs = [\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]\n<strong>Output:</strong> [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n</pre><p><strong class=\"example\">Example 2:</strong></p>\n<pre><strong>Input:</strong> strs = [\"\"]\n<strong>Output:</strong> [[\"\"]]\n</pre><p><strong class=\"example\">Example 3:</strong></p>\n<pre><strong>Input:</strong> strs = [\"a\"]\n<strong>Output:</strong> [[\"a\"]]\n</pre>\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= strs.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>0 &lt;= strs[i].length &lt;= 100</code></li>\n\t<li><code>strs[i]</code> consists of lowercase English letters.</li>\n</ul>\n", "difficulty": "Medium", "isPaidOnly": false, "hints": [], "likes": 15307, "dislikes": 440, "companyTagStats": null, "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<List<String>> groupAnagrams(String[] strs) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def groupAnagrams(self, strs):\n        \"\"\"\n        :type strs: List[str]\n        :rtype: List[List[str]]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def groupAnagrams(self, strs: List[str]) -> List[List[str]]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Return an array of arrays of size *returnSize.\n * The sizes of the arrays are returned as *returnColumnSizes array.\n * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().\n */\nchar *** groupAnagrams(char ** strs, int strsSize, int* returnSize, int** returnColumnSizes){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<IList<string>> GroupAnagrams(string[] strs) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string[]} strs\n * @return {string[][]}\n */\nvar groupAnagrams = function(strs) {\n    \n};"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String[]} strs\n# @return {String[][]}\ndef group_anagrams(strs)\n    \nend"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func groupAnagrams(_ strs: [String]) -> [[String]] {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func groupAnagrams(strs []string) [][]string {\n    \n}"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def groupAnagrams(strs: Array[String]): List[List[String]] = {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun groupAnagrams(strs: Array<String>): List<List<String>> {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn group_anagrams(strs: Vec<String>) -> Vec<Vec<String>> {\n        \n    }\n}"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String[] $strs\n     * @return String[][]\n     */\n    function groupAnagrams($strs) {\n        \n    }\n}"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function groupAnagrams(strs: string[]): string[][] {\n\n};"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (group-anagrams strs)\n  (-> (listof string?) (listof (listof string?)))\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec group_anagrams(Strs :: [unicode:unicode_binary()]) -> [[unicode:unicode_binary()]].\ngroup_anagrams(Strs) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec group_anagrams(strs :: [String.t]) :: [[String.t]]\n  def group_anagrams(strs) do\n\n  end\nend"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<List<String>> groupAnagrams(List<String> strs) {\n\n  }\n}"}], "metaData": "{\r\n  \"name\": \"groupAnagrams\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"strs\",\r\n      \"type\": \"string[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<list<string>>\",\r\n    \"dealloc\": true\r\n  }\r\n}", "topicTags": [{"name": "Array", "slug": "array"}, {"name": "Hash Table", "slug": "hash-table"}, {"name": "String", "slug": "string"}, {"name": "Sorting", "slug": "sorting"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "valid-anagram", "title": "Valid Anagram", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "group-shifted-strings", "title": "Group Shifted Strings", "translatedTitle": null, "isPaidOnly": true}, {"difficulty": "Easy", "titleSlug": "find-resultant-array-after-removing-anagrams", "title": "Find Resultant Array After Removing Anagrams", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "count-anagrams", "title": "Count Anagrams", "translatedTitle": null, "isPaidOnly": false}], "mysqlSchemas": [], "stats": "{\"totalAccepted\": \"2M\", \"totalSubmission\": \"3M\", \"totalAcceptedRaw\": 1971145, \"totalSubmissionRaw\": 2951095, \"acRate\": \"66.8%\"}", "solution": {"id": "236", "title": "Group Anagrams", "content": "[TOC]\n\n## Video Solution\n\n---\n\n<div class='video-preview'></div>\n\n <div>&nbsp;\n </div>\n\n## Solution Article\n\n---\n\n#### Approach 1: Categorize by Sorted String\n\n**Intuition**\n\nTwo strings are anagrams if and only if their sorted strings are equal.\n\n**Algorithm**\n\nMaintain a map `ans : {String -> List}` where each key $$\\text{K}$$ is a sorted string, and each value is the list of strings from the initial input that when sorted, are equal to $$\\text{K}$$.\n\nIn Java, we will store the key as a string, eg. `code`.  In Python, we will store the key as a hashable tuple, eg. `('c', 'o', 'd', 'e')`.\n\n![Anagrams](../Figures/49_groupanagrams1.png)\n\n<iframe src=\"https://leetcode.com/playground/jqDxWG5y/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"jqDxWG5y\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(NK \\log K)$$, where $$N$$ is the length of `strs`, and $$K$$ is the maximum length of a string in `strs`.  The outer loop has complexity $$O(N)$$ as we iterate through each string.  Then, we sort each string in $$O(K \\log K)$$ time.\n\n* Space Complexity: $$O(NK)$$, the total information content stored in `ans`.\n<br />\n<br />\n\n---\n\n#### Approach 2: Categorize by Count\n\n**Intuition**\n\nTwo strings are anagrams if and only if their character counts (respective number of occurrences of each character) are the same.\n\n**Algorithm**\n\nWe can transform each string $$\\text{s}$$ into a character count, $$\\text{count}$$, consisting of 26 non-negative integers representing the number of $$\\text{a}$$'s, $$\\text{b}$$'s, $$\\text{c}$$'s, etc.  We use these counts as the basis for our hash map.\n\nIn Java, the hashable representation of our count will be a string delimited with '**#**' characters.  For example, `abbccc` will be `#1#2#3#0#0#0...#0` where there are 26 entries total.  In python, the representation will be a tuple of the counts.  For example, `abbccc` will be `(1, 2, 3, 0, 0, ..., 0)`, where again there are 26 entries total.\n\n![Anagrams](../Figures/49_groupanagrams2.png)\n\n<iframe src=\"https://leetcode.com/playground/3kCfXwHV/shared\" frameBorder=\"0\" width=\"100%\" height=\"412\" name=\"3kCfXwHV\"></iframe>\n\n**Complexity Analysis**\n\n* Time Complexity:  $$O(NK)$$, where $$N$$ is the length of `strs`, and $$K$$ is the maximum length of a string in `strs`.  Counting each string is linear in the size of the string, and we count every string.\n\n* Space Complexity: $$O(NK)$$, the total information content stored in `ans`.", "contentTypeId": "107", "paidOnly": false, "hasVideoSolution": true, "paidOnlyVideo": true, "canSeeDetail": true, "rating": {"count": 342, "average": "4.790", "userRating": null}, "topic": {"id": 127405, "commentCount": 394, "topLevelCommentCount": 248, "favoriteCount": 0, "viewCount": 860286, "subscribed": false, "solutionTags": [], "post": {"id": 255661, "status": null, "creationDate": 1504728092, "author": {"username": "LeetCode", "isActive": true, "profile": {"userAvatar": "https://assets.leetcode.com/users/leetcode/avatar_1568224780.png", "reputation": 27343}}}}}}}}
{"data": {"question": {"questionId": "1", "title": "Two Sum", "titleSlug": "two-sum", "content": "<p>Given an array of integers <code>nums</code>&nbsp;and an integer <code>target</code>, return <em>indices of the two numbers such that they add up to <code>target</code></em>.</p>\n\n<p>You may assume that each input would have <strong><em>exactly</em> one solution</strong>, and you may not use the <em>same</em> element twice.</p>\n\n<p>You can return the answer in any order.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [2,7,11,15], target = 9\n<strong>Output:</strong> [0,1]\n<strong>Explanation:</strong> Because nums[0] + nums[1] == 9, we return [0, 1].\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,2,4], target = 6\n<strong>Output:</strong> [1,2]\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [3,3], target = 6\n<strong>Output:</strong> [0,1]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>2 &lt;= nums.length &lt;= 10<sup>4</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= nums[i] &lt;= 10<sup>9</sup></code></li>\n\t<li><code>-10<sup>9</sup> &lt;= target &lt;= 10<sup>9</sup></code></li>\n\t<li><strong>Only one valid answer exists.</strong></li>\n</ul>\n\n<p>&nbsp;</p>\n<strong>Follow-up:&nbsp;</strong>Can you come up with an algorithm that is less than&nbsp;<code>O(n<sup>2</sup>)&nbsp;</code>time complexity?", "difficulty": "Easy", "isPaidOnly": false, "hints": ["A really brute force way would be to search for all possible pairs of numbers but that would be too slow. Again, it's best to try out brute force solutions for just for completeness. It is from these brute force solutions that you can come up with optimizations.", "So, if we fix one of the numbers, say <code>x</code>, we have to scan the entire array to find the next number <code>y</code> which is <code>value - x</code> where value is the input parameter. Can we change our array somehow so that this search becomes faster?", "The second train of thought is, without changing the array, can we use additional space somehow? Like maybe a hash map to speed up the search?"], "likes": 46506, "dislikes": 1504, "companyTagStats": null, "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def twoSum(self, nums, target):\n        \"\"\"\n        :type nums: List[int]\n        :type target: int\n        :rtype: List[int]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nint* twoSum(int* nums, int numsSize, int target, int* returnSize){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int[] TwoSum(int[] nums, int target) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number[]}\n */\nvar twoSum = function(nums, target) {\n    \n};"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @param {Integer} target\n# @return {Integer[]}\ndef two_sum(nums, target)\n    \nend"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func twoSum(_ nums: [Int], _ target: Int) -> [Int] {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func twoSum(nums []int, target int) []int {\n    \n}"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def twoSum(nums: Array[Int], target: Int): Array[Int] = {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun twoSum(nums: IntArray, target: Int): IntArray {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn two_sum(nums: Vec<i32>, target: i32) -> Vec<i32> {\n        \n    }\n}"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @param Integer $target\n     * @return Integer[]\n     */\n    function twoSum($nums, $target) {\n        \n    }\n}"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function twoSum(nums: number[], target: number): number[] {\n\n};"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (two-sum nums target)\n  (-> (listof exact-integer?) exact-integer? (listof exact-integer?))\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec two_sum(Nums :: [integer()], Target :: integer()) -> [integer()].\ntwo_sum(Nums, Target) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec two_sum(nums :: [integer], target :: integer) :: [integer]\n  def two_sum(nums, target) do\n\n  end\nend"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<int> twoSum(List<int> nums, int target) {\n\n  }\n}"}], "metaData": "{\n  \"name\": \"twoSum\",\n  \"params\": [\n    {\n      \"name\": \"nums\",\n      \"type\": \"integer[]\"\n    },\n    {\n      \"name\": \"target\",\n      \"type\": \"integer\"\n    }\n  ],\n  \"return\": {\n    \"type\": \"integer[]\",\n    \"size\": 2\n  },\n  \"manual\": false\n}", "topicTags": [{"name": "Array", "slug": "array"}, {"name": "Hash Table", "slug": "hash-table"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "3sum", "title": "3Sum", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "4sum", "title": "4Sum", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "two-sum-ii-input-array-is-sorted", "title": "Two Sum II - Input Array Is Sorted", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "two-sum-iii-data-structure-design", "title": "Two Sum III - Data structure design", "translatedTitle": null, "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "subarray-sum-equals-k", "title": "Subarray Sum Equals K", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "two-sum-iv-input-is-a-bst", "title": "Two Sum IV - Input is a BST", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "two-sum-less-than-k", "title": "Two Sum Less Than K", "translatedTitle": null, "isPaidOnly": true}, {"difficulty": "Medium", "titleSlug": "max-number-of-k-sum-pairs", "title": "Max Number of K-Sum Pairs", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-good-meals", "title": "Count Good Meals", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "count-number-of-pairs-with-absolute-difference-k", "title": "Count Number of Pairs With Absolute Difference K", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "number-of-pairs-of-strings-with-concatenation-equal-to-target", "title": "Number of Pairs of Strings With Concatenation Equal to Target", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "find-all-k-distant-indices-in-an-array", "title": "Find All K-Distant Indices in an Array", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "first-letter-to-appear-twice", "title": "First Letter to Appear Twice", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Hard", "titleSlug": "number-of-excellent-pairs", "title": "Number of Excellent Pairs", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "number-of-arithmetic-triplets", "title": "Number of Arithmetic Triplets", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "node-with-highest-edge-score", "title": "Node With Highest Edge Score", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "check-distances-between-same-letters", "title": "Check Distances Between Same Letters", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "find-subarrays-with-equal-sum", "title": "Find Subarrays With Equal Sum", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "largest-positive-integer-that-exists-with-its-negative", "title": "Largest Positive Integer That Exists With Its Negative", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "number-of-distinct-averages", "title": "Number of Distinct Averages", "translatedTitle": null, "isPaidOnly": false}], "mysqlSchemas": [], "stats": "{\"totalAccepted\": \"9.7M\", \"totalSubmission\": \"19.4M\", \"totalAcceptedRaw\": 9686915, \"totalSubmissionRaw\": 19410201, \"acRate\": \"49.9%\"}", "solution": {"id": "7", "title": "Two Sum", "content": "[TOC]\r\n\r\n## Video Solution\r\n\r\n---\r\n\r\n<div>\r\n    <div class=\"video-container\">\r\n        <iframe src=\"https://player.vimeo.com/video/567281997\" width=\"640\" height=\"360\" frameborder=\"0\" allow=\"autoplay; fullscreen\" allowfullscreen></iframe>\r\n    </div>\r\n</div>\r\n\r\n<div>&nbsp;\r\n</div>\r\n\r\n## Solution Article\r\n\r\n---\r\n\r\n#### Approach 1: Brute Force\r\n\r\n**Algorithm**\r\n\r\nThe brute force approach is simple. Loop through each element $$x$$ and find if there is another value that equals to $$target - x$$.\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/cvvgJGBX/shared\" frameBorder=\"0\" width=\"100%\" height=\"276\" name=\"cvvgJGBX\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n^2)$$.\r\nFor each element, we try to find its complement by looping through the rest of the array which takes $$O(n)$$ time. Therefore, the time complexity is $$O(n^2)$$.\r\n\r\n* Space complexity: $$O(1)$$.\r\nThe space required does not depend on the size of the input array, so only constant space is used.\r\n\r\n---\r\n#### Approach 2: Two-pass Hash Table\r\n\r\n**Intuition**\r\n\r\nTo improve our runtime complexity, we need a more efficient way to check if the complement exists in the array. If the complement exists, we need to get its index. What is the best way to maintain a mapping of each element in the array to its index? A hash table.\r\n\r\nWe can reduce the lookup time from $$O(n)$$ to $$O(1)$$ by trading space for speed. A hash table is well suited for this purpose because it supports fast lookup in *near* constant time. I say \"near\" because if a collision occurred, a lookup could degenerate to $$O(n)$$ time. However, lookup in a hash table should be amortized $$O(1)$$ time as long as the hash function was chosen carefully.\r\n\r\n**Algorithm**\r\n\r\nA simple implementation uses two iterations. In the first iteration, we add each element's value as a key and its index as a value to the hash table. Then, in the second iteration, we check if each element's complement ($$target - nums[i]$$) exists in the hash table. If it does exist, we return current element's index and its complement's index. Beware that the complement must not be $$nums[i]$$ itself!\r\n\r\n**Implementation**\r\n\r\n<iframe src=\"https://leetcode.com/playground/BcoEkYCL/shared\" frameBorder=\"0\" width=\"100%\" height=\"327\" name=\"BcoEkYCL\"></iframe>  \r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n)$$.\r\nWe traverse the list containing $$n$$ elements exactly twice. Since the hash table reduces the lookup time to $$O(1)$$, the overall time complexity is $$O(n)$$.\r\n\r\n* Space complexity: $$O(n)$$.\r\nThe extra space required depends on the number of items stored in the hash table, which stores exactly $$n$$ elements.\r\n\r\n---\r\n#### Approach 3: One-pass Hash Table\r\n\r\n**Algorithm**\r\n    \r\nIt turns out we can do it in one-pass. While we are iterating and inserting elements into the hash table, we also look back to check if current element's complement already exists in the hash table. If it exists, we have found a solution and return the indices immediately.\r\n\r\n**Implementation**    \r\n    \r\n<iframe src=\"https://leetcode.com/playground/XjHaJQau/shared\" frameBorder=\"0\" width=\"100%\" height=\"293\" name=\"XjHaJQau\"></iframe>\r\n\r\n**Complexity Analysis**\r\n\r\n* Time complexity: $$O(n)$$.\r\nWe traverse the list containing $$n$$ elements only once. Each lookup in the table costs only $$O(1)$$ time.\r\n\r\n* Space complexity: $$O(n)$$.\r\nThe extra space required depends on the number of items stored in the hash table, which stores at most $$n$$ elements.", "contentTypeId": "107", "paidOnly": false, "hasVideoSolution": true, "paidOnlyVideo": false, "canSeeDetail": true, "rating": {"count": 3126, "average": "4.689", "userRating": null}, "topic": {"id": 127810, "commentCount": 3077, "topLevelCommentCount": 2099, "favoriteCount": 0, "viewCount": 6807641, "subscribed": false, "solutionTags": [], "post": {"id": 260381, "status": null, "creationDate": 1457528847, "author": {"username": "LeetCode", "isActive": true, "profile": {"userAvatar": "https://assets.leetcode.com/users/leetcode/avatar_1568224780.png", "reputation": 27343}}}}}}}}
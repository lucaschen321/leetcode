{"data": {"question": {"questionId": "26", "title": "Remove Duplicates from Sorted Array", "titleSlug": "remove-duplicates-from-sorted-array", "content": "<p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing order</strong>, remove the duplicates <a href=\"https://en.wikipedia.org/wiki/In-place_algorithm\" target=\"_blank\"><strong>in-place</strong></a> such that each unique element appears only <strong>once</strong>. The <strong>relative order</strong> of the elements should be kept the <strong>same</strong>. Then return <em>the number of unique elements in </em><code>nums</code>.</p>\n\n<p>Consider the number of unique elements of <code>nums</code> to be <code>k</code>, to get accepted, you need to do the following things:</p>\n\n<ul>\n\t<li>Change the array <code>nums</code> such that the first <code>k</code> elements of <code>nums</code> contain the unique elements in the order they were present in <code>nums</code> initially. The remaining elements of <code>nums</code> are not important as well as the size of <code>nums</code>.</li>\n\t<li>Return <code>k</code>.</li>\n</ul>\n\n<p><strong>Custom Judge:</strong></p>\n\n<p>The judge will test your solution with the following code:</p>\n\n<pre>\nint[] nums = [...]; // Input array\nint[] expectedNums = [...]; // The expected answer with correct length\n\nint k = removeDuplicates(nums); // Calls your implementation\n\nassert k == expectedNums.length;\nfor (int i = 0; i &lt; k; i++) {\n    assert nums[i] == expectedNums[i];\n}\n</pre>\n\n<p>If all assertions pass, then your solution will be <strong>accepted</strong>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [1,1,2]\n<strong>Output:</strong> 2, nums = [1,2,_]\n<strong>Explanation:</strong> Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> nums = [0,0,1,1,1,2,2,3,3,4]\n<strong>Output:</strong> 5, nums = [0,1,2,3,4,_,_,_,_,_]\n<strong>Explanation:</strong> Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.\nIt does not matter what you leave beyond the returned k (hence they are underscores).\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>1 &lt;= nums.length &lt;= 3 * 10<sup>4</sup></code></li>\n\t<li><code>-100 &lt;= nums[i] &lt;= 100</code></li>\n\t<li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li>\n</ul>\n", "difficulty": "Easy", "isPaidOnly": false, "hints": ["In this problem, the key point to focus on is the input array being sorted. As far as duplicate elements are concerned, what is their positioning in the array when the given array is sorted? Look at the image above for the answer. If we know the position of one of the elements, do we also know the positioning of all the duplicate elements?\r\n\r\n<br>\r\n<img src=\"https://assets.leetcode.com/uploads/2019/10/20/hint_rem_dup.png\" width=\"500\"/>", "We need to modify the array in-place and the size of the final array would potentially be smaller than the size of the input array. So, we ought to use a two-pointer approach here. One, that would keep track of the current element in the original array and another one for just the unique elements.", "Essentially, once an element is encountered, you simply need to <b>bypass</b> its duplicates and move on to the next unique element."], "likes": 10948, "dislikes": 14785, "companyTagStats": null, "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int removeDuplicates(vector<int>& nums) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int removeDuplicates(int[] nums) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def removeDuplicates(self, nums):\n        \"\"\"\n        :type nums: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def removeDuplicates(self, nums: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int removeDuplicates(int* nums, int numsSize){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int RemoveDuplicates(int[] nums) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar removeDuplicates = function(nums) {\n    \n};"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} nums\n# @return {Integer}\ndef remove_duplicates(nums)\n    \nend"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func removeDuplicates(_ nums: inout [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func removeDuplicates(nums []int) int {\n    \n}"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def removeDuplicates(nums: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun removeDuplicates(nums: IntArray): Int {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn remove_duplicates(nums: &mut Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $nums\n     * @return Integer\n     */\n    function removeDuplicates(&$nums) {\n        \n    }\n}"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function removeDuplicates(nums: number[]): number {\n\n};"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (remove-duplicates nums)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int removeDuplicates(List<int> nums) {\n\n  }\n}"}], "metaData": "{\r\n  \"name\": \"removeDuplicates\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"nums\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  },\r\n  \"output\": {\r\n    \"paramindex\": 0,\r\n    \"size\": \"ret\"\r\n  }\r\n}", "topicTags": [{"name": "Array", "slug": "array"}, {"name": "Two Pointers", "slug": "two-pointers"}], "similarQuestionList": [{"difficulty": "Easy", "titleSlug": "remove-element", "title": "Remove Element", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "remove-duplicates-from-sorted-array-ii", "title": "Remove Duplicates from Sorted Array II", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "apply-operations-to-an-array", "title": "Apply Operations to an Array", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "sum-of-distances", "title": "Sum of Distances", "translatedTitle": null, "isPaidOnly": false}], "mysqlSchemas": [], "stats": "{\"totalAccepted\": \"3M\", \"totalSubmission\": \"5.8M\", \"totalAcceptedRaw\": 2989823, \"totalSubmissionRaw\": 5766171, \"acRate\": \"51.9%\"}", "solution": {"id": "1562", "title": "Remove Duplicates from Sorted Array", "content": "[TOC]\n\n## Solution\n<div class='video-preview'></div>\n---\n\n\n### Overview\n\nThe problem would have been simpler if we are allowed to use extra space.\n\nWe can create a map which stores all **unique array elements** as the key and **element frequency** as the value.\n\nAfter populating our map, we get all the unique elements from our array.\n\nWe then iterate our map and push all the keys in our input array\n\nHowever, without using extra space it makes it a bit tricky as we have to modify the existing input array\n\n---\n### Approach 1: Two indexes approach\n\n#### Intuition\n\nTo solve the problem, let's look at the condition carefully,\n> It is **guaranteed** that the given array is a **sorted array**.\n\nLet `k` be the count of unique elements in our input array.\n\n> It doesn't matter what elements we place after the first `k` elements.\n\nFrom the condition, we can have a few observations here,\n- Since the array we have is sorted, all duplicate values will be one after the other.\n\n- We need to update the first `k` elements in an array with unique values and return the value of `k`.\n\n\nUsing the following intuition, let's understand how to address this problem.\n\n- The problem states that we need to fill the first `k` elements of an array with unique values\n- For doing so, we modify the input array in-place so that we don't use extra space\n- In order to perform in-place operations, we use the **Two indexes** approach\n- The **first index** updates the value in our input array while reading the data from the **second index**\n> First Index is responsible for writing unique values in our input array, while Second Index will read the input array and pass all the distinct elements to First Index.    \n- We continue the above steps until the **second index** reaches the end of an array\n\n#### Algorithm\n\nBy analyzing the above three key observations, we can derive the following algorithm,\n-  Start both indexes `(insertIndex, i)` from 1. \n> `insertIndex` and `i` represents our First and second Index respectively.\n-  Check if the previous element is different from the current element\n> The previous element is the element just before our `i` index i.e element present at `arr[i-1]` \n- If found different then perform `arr[insertIndex] = arr[i]` and increment `insertIndex` by 1\n- Increment `i` index by 1 till we reach end of the array\n\n   > Note: After reaching the end of the array, our **insertIndex** variable will hold the count of unique elements in our input array.\n\n![Representation](../Figures/26/representation.png)\n\n#### Implementation\n\n<iframe src=\"https://leetcode.com/playground/HD3ZA4JC/shared\" frameBorder=\"0\" width=\"100%\" height=\"310\" name=\"HD3ZA4JC\"></iframe>\n\n#### Complexity Analysis\n\nLet $N$ be the size of the input array.\n\n* Time Complexity: $O(N)$, since we only have 2 pointers, and both the pointers will traverse the array at most once.\n\n* Space Complexity: $O(1)$, since we are not using any extra space.", "contentTypeId": "107", "paidOnly": false, "hasVideoSolution": false, "paidOnlyVideo": true, "canSeeDetail": true, "rating": {"count": 98, "average": "4.184", "userRating": null}, "topic": {"id": 2601915, "commentCount": 109, "topLevelCommentCount": 63, "favoriteCount": 0, "viewCount": 450670, "subscribed": false, "solutionTags": [], "post": {"id": 4216797, "status": null, "creationDate": 1663690507, "author": {"username": "LeetCode", "isActive": true, "profile": {"userAvatar": "https://assets.leetcode.com/users/leetcode/avatar_1568224780.png", "reputation": 27343}}}}}}}}
{"data": {"question": {"questionId": "17", "title": "Letter Combinations of a Phone Number", "titleSlug": "letter-combinations-of-a-phone-number", "content": "<p>Given a string containing digits from <code>2-9</code> inclusive, return all possible letter combinations that the number could represent. Return the answer in <strong>any order</strong>.</p>\n\n<p>A mapping of digits to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p>\n<img alt=\"\" src=\"https://assets.leetcode.com/uploads/2022/03/15/1200px-telephone-keypad2svg.png\" style=\"width: 300px; height: 243px;\" />\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;23&quot;\n<strong>Output:</strong> [&quot;ad&quot;,&quot;ae&quot;,&quot;af&quot;,&quot;bd&quot;,&quot;be&quot;,&quot;bf&quot;,&quot;cd&quot;,&quot;ce&quot;,&quot;cf&quot;]\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;&quot;\n<strong>Output:</strong> []\n</pre>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<pre>\n<strong>Input:</strong> digits = &quot;2&quot;\n<strong>Output:</strong> [&quot;a&quot;,&quot;b&quot;,&quot;c&quot;]\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>0 &lt;= digits.length &lt;= 4</code></li>\n\t<li><code>digits[i]</code> is a digit in the range <code>[&#39;2&#39;, &#39;9&#39;]</code>.</li>\n</ul>\n", "difficulty": "Medium", "isPaidOnly": false, "hints": [], "likes": 15029, "dislikes": 841, "companyTagStats": null, "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    vector<string> letterCombinations(string digits) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public List<String> letterCombinations(String digits) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def letterCombinations(self, digits):\n        \"\"\"\n        :type digits: str\n        :rtype: List[str]\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def letterCombinations(self, digits: str) -> List[str]:\n        "}, {"lang": "C", "langSlug": "c", "code": "/**\n * Note: The returned array must be malloced, assume caller calls free().\n */\nchar ** letterCombinations(char * digits, int* returnSize){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public IList<string> LetterCombinations(string digits) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {string} digits\n * @return {string[]}\n */\nvar letterCombinations = function(digits) {\n    \n};"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {String} digits\n# @return {String[]}\ndef letter_combinations(digits)\n    \nend"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func letterCombinations(_ digits: String) -> [String] {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func letterCombinations(digits string) []string {\n    \n}"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def letterCombinations(digits: String): List[String] = {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun letterCombinations(digits: String): List<String> {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn letter_combinations(digits: String) -> Vec<String> {\n        \n    }\n}"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param String $digits\n     * @return String[]\n     */\n    function letterCombinations($digits) {\n        \n    }\n}"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function letterCombinations(digits: string): string[] {\n\n};"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (letter-combinations digits)\n  (-> string? (listof string?))\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec letter_combinations(Digits :: unicode:unicode_binary()) -> [unicode:unicode_binary()].\nletter_combinations(Digits) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec letter_combinations(digits :: String.t) :: [String.t]\n  def letter_combinations(digits) do\n\n  end\nend"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  List<String> letterCombinations(String digits) {\n\n  }\n}"}], "metaData": "{ \r\n  \"name\": \"letterCombinations\",\r\n  \"params\": [\r\n    { \r\n      \"name\": \"digits\",\r\n      \"type\": \"string\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"list<string>\"\r\n  }\r\n}", "topicTags": [{"name": "Hash Table", "slug": "hash-table"}, {"name": "String", "slug": "string"}, {"name": "Backtracking", "slug": "backtracking"}], "similarQuestionList": [{"difficulty": "Medium", "titleSlug": "generate-parentheses", "title": "Generate Parentheses", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "combination-sum", "title": "Combination Sum", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Easy", "titleSlug": "binary-watch", "title": "Binary Watch", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "count-number-of-texts", "title": "Count Number of Texts", "translatedTitle": null, "isPaidOnly": false}], "mysqlSchemas": [], "stats": "{\"totalAccepted\": \"1.6M\", \"totalSubmission\": \"2.7M\", \"totalAcceptedRaw\": 1554367, \"totalSubmissionRaw\": 2735747, \"acRate\": \"56.8%\"}", "solution": {"id": "1118", "title": "Letter Combinations of a Phone Number", "content": null, "contentTypeId": "107", "paidOnly": true, "hasVideoSolution": false, "paidOnlyVideo": true, "canSeeDetail": false, "rating": {"count": 85, "average": "4.212", "userRating": null}, "topic": {"id": 1104021, "commentCount": 210, "topLevelCommentCount": 128, "favoriteCount": 0, "viewCount": 350812, "subscribed": false, "solutionTags": [], "post": {"id": 1980727, "status": null, "creationDate": 1615441915, "author": {"username": "LeetCode", "isActive": true, "profile": {"userAvatar": "https://assets.leetcode.com/users/leetcode/avatar_1568224780.png", "reputation": 27343}}}}}}}}
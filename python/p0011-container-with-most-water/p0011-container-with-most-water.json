{"data": {"question": {"questionId": "11", "title": "Container With Most Water", "titleSlug": "container-with-most-water", "content": "<p>You are given an integer array <code>height</code> of length <code>n</code>. There are <code>n</code> vertical lines drawn such that the two endpoints of the <code>i<sup>th</sup></code> line are <code>(i, 0)</code> and <code>(i, height[i])</code>.</p>\n\n<p>Find two lines that together with the x-axis form a container, such that the container contains the most water.</p>\n\n<p>Return <em>the maximum amount of water a container can store</em>.</p>\n\n<p><strong>Notice</strong> that you may not slant the container.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n<img alt=\"\" src=\"https://s3-lc-upload.s3.amazonaws.com/uploads/2018/07/17/question_11.jpg\" style=\"width: 600px; height: 287px;\" />\n<pre>\n<strong>Input:</strong> height = [1,8,6,2,5,4,8,3,7]\n<strong>Output:</strong> 49\n<strong>Explanation:</strong> The above vertical lines are represented by array [1,8,6,2,5,4,8,3,7]. In this case, the max area of water (blue section) the container can contain is 49.\n</pre>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<pre>\n<strong>Input:</strong> height = [1,1]\n<strong>Output:</strong> 1\n</pre>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n\t<li><code>n == height.length</code></li>\n\t<li><code>2 &lt;= n &lt;= 10<sup>5</sup></code></li>\n\t<li><code>0 &lt;= height[i] &lt;= 10<sup>4</sup></code></li>\n</ul>\n", "difficulty": "Medium", "isPaidOnly": false, "hints": ["If you simulate the problem, it will be O(n^2) which is not efficient.", "Try to use two-pointers. Set one pointer to the left and one to the right of the array. Always move the pointer that points to the lower line.", "How can you calculate the amount of water at each step?"], "likes": 24180, "dislikes": 1293, "companyTagStats": null, "codeSnippets": [{"lang": "C++", "langSlug": "cpp", "code": "class Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        \n    }\n};"}, {"lang": "Java", "langSlug": "java", "code": "class Solution {\n    public int maxArea(int[] height) {\n        \n    }\n}"}, {"lang": "Python", "langSlug": "python", "code": "class Solution(object):\n    def maxArea(self, height):\n        \"\"\"\n        :type height: List[int]\n        :rtype: int\n        \"\"\"\n        "}, {"lang": "Python3", "langSlug": "python3", "code": "class Solution:\n    def maxArea(self, height: List[int]) -> int:\n        "}, {"lang": "C", "langSlug": "c", "code": "int maxArea(int* height, int heightSize){\n\n}"}, {"lang": "C#", "langSlug": "csharp", "code": "public class Solution {\n    public int MaxArea(int[] height) {\n        \n    }\n}"}, {"lang": "JavaScript", "langSlug": "javascript", "code": "/**\n * @param {number[]} height\n * @return {number}\n */\nvar maxArea = function(height) {\n    \n};"}, {"lang": "Ruby", "langSlug": "ruby", "code": "# @param {Integer[]} height\n# @return {Integer}\ndef max_area(height)\n    \nend"}, {"lang": "Swift", "langSlug": "swift", "code": "class Solution {\n    func maxArea(_ height: [Int]) -> Int {\n        \n    }\n}"}, {"lang": "Go", "langSlug": "golang", "code": "func maxArea(height []int) int {\n    \n}"}, {"lang": "Scala", "langSlug": "scala", "code": "object Solution {\n    def maxArea(height: Array[Int]): Int = {\n        \n    }\n}"}, {"lang": "Kotlin", "langSlug": "kotlin", "code": "class Solution {\n    fun maxArea(height: IntArray): Int {\n        \n    }\n}"}, {"lang": "Rust", "langSlug": "rust", "code": "impl Solution {\n    pub fn max_area(height: Vec<i32>) -> i32 {\n        \n    }\n}"}, {"lang": "PHP", "langSlug": "php", "code": "class Solution {\n\n    /**\n     * @param Integer[] $height\n     * @return Integer\n     */\n    function maxArea($height) {\n        \n    }\n}"}, {"lang": "TypeScript", "langSlug": "typescript", "code": "function maxArea(height: number[]): number {\n\n};"}, {"lang": "Racket", "langSlug": "racket", "code": "(define/contract (max-area height)\n  (-> (listof exact-integer?) exact-integer?)\n\n  )"}, {"lang": "Erlang", "langSlug": "erlang", "code": "-spec max_area(Height :: [integer()]) -> integer().\nmax_area(Height) ->\n  ."}, {"lang": "Elixir", "langSlug": "elixir", "code": "defmodule Solution do\n  @spec max_area(height :: [integer]) :: integer\n  def max_area(height) do\n\n  end\nend"}, {"lang": "Dart", "langSlug": "dart", "code": "class Solution {\n  int maxArea(List<int> height) {\n\n  }\n}"}], "metaData": "{\r\n  \"name\": \"maxArea\",\r\n  \"params\": [\r\n    {\r\n      \"name\": \"height\",\r\n      \"type\": \"integer[]\"\r\n    }\r\n  ],\r\n  \"return\": {\r\n    \"type\": \"integer\"\r\n  }\r\n}", "topicTags": [{"name": "Array", "slug": "array"}, {"name": "Two Pointers", "slug": "two-pointers"}, {"name": "Greedy", "slug": "greedy"}], "similarQuestionList": [{"difficulty": "Hard", "titleSlug": "trapping-rain-water", "title": "Trapping Rain Water", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "maximum-tastiness-of-candy-basket", "title": "Maximum Tastiness of Candy Basket", "translatedTitle": null, "isPaidOnly": false}, {"difficulty": "Medium", "titleSlug": "house-robber-iv", "title": "House Robber IV", "translatedTitle": null, "isPaidOnly": false}], "mysqlSchemas": [], "stats": "{\"totalAccepted\": \"2.1M\", \"totalSubmission\": \"3.9M\", \"totalAcceptedRaw\": 2101828, \"totalSubmissionRaw\": 3894351, \"acRate\": \"54.0%\"}", "solution": {"id": "55", "title": "Container With Most Water", "content": "[TOC]\n\n\n## Video Solution\n\n---\n\n<div class='video-preview'></div>\n\n<div>&nbsp;\n</div>\n\n## Solution Article\n\n---\n\n## Overview\n\nWe have to maximize the Area that can be formed between the vertical lines using the shorter line as length and the distance between the lines as the width of the rectangle forming the area.\n\n</br>\n\n---\n\n#### Approach 1: Brute Force\n\n**Algorithm**\n\nIn this case, we will simply consider the area for every possible pair of the lines and find out the maximum area out of those.\n\n> **Note:** Brute force approaches are often included because they are intuitive starting points when solving a problem. However, they are often expected to receive Time Limit Exceeded since they would not be accepted in an interview setting.\n\n<iframe src=\"https://leetcode.com/playground/9ybKrH5t/shared\" frameBorder=\"0\" width=\"100%\" height=\"259\" name=\"9ybKrH5t\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(n^2)$$. Calculating area for all $$\\dfrac{n(n-1)}{2}$$ height pairs.\n* Space complexity: $$O(1)$$. Constant extra space is used.\n<br />\n<br />\n---\n\n#### Approach 2: Two Pointer Approach\n\n**Algorithm**\n\nThe intuition behind this approach is that the area formed between the lines will always be limited by the height of the shorter line. Further, the farther the lines, the more will be the area obtained.\n\nWe take two pointers, one at the beginning and one at the end of the array constituting the length of the lines. Futher, we maintain a variable $$\\text{maxarea}$$ to store the maximum area obtained till now. At every step, we find out the area formed between them, update $$\\text{maxarea}$$ and move the pointer pointing to the shorter line towards the other end by one step.\n\nThe algorithm can be better understood by looking at the example below:\n```\n1 8 6 2 5 4 8 3 7\n```\n\n<!--![Water_Continer](https://leetcode.com/media/original_images/11_Container_Water.gif)-->\n!?!../Documents/11_Container_Water.json:1000,563!?!\n\nHow does this approach work?\n\nInitially we consider the area constituting the exterior most lines. Now, to maximize the area, we need to consider the area between the lines of larger lengths. If we try to move the pointer at the longer line inwards, we won't gain any increase in area, since it is limited by the shorter line. But moving the shorter line's pointer could turn out to be beneficial, as per the same argument, despite the reduction in the width. This is done since a relatively longer line obtained by moving the shorter line's pointer might overcome the reduction in area caused by the width reduction.\n\nFor further clarification click [here](https://leetcode.com/problems/container-with-most-water/discuss/6099/yet-another-way-to-see-what-happens-in-the-on-algorithm) and for the proof click [here](https://leetcode.com/problems/container-with-most-water/discuss/6089/Anyone-who-has-a-O(N)-algorithm/7268).\n\n<iframe src=\"https://leetcode.com/playground/Mdvzu8qV/shared\" frameBorder=\"0\" width=\"100%\" height=\"344\" name=\"Mdvzu8qV\"></iframe>\n\n**Complexity Analysis**\n\n* Time complexity: $$O(n)$$. Single pass.\n\n* Space complexity: $$O(1)$$. Constant space is used.", "contentTypeId": "107", "paidOnly": false, "hasVideoSolution": true, "paidOnlyVideo": true, "canSeeDetail": true, "rating": {"count": 555, "average": "4.710", "userRating": null}, "topic": {"id": 127443, "commentCount": 514, "topLevelCommentCount": 358, "favoriteCount": 0, "viewCount": 1054441, "subscribed": false, "solutionTags": [], "post": {"id": 255616, "status": null, "creationDate": 1468578355, "author": {"username": "LeetCode", "isActive": true, "profile": {"userAvatar": "https://assets.leetcode.com/users/leetcode/avatar_1568224780.png", "reputation": 27343}}}}}}}}